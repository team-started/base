Index: Classes/Processor/FileProcessor.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classes/Processor/FileProcessor.php b/Classes/Processor/FileProcessor.php
--- a/Classes/Processor/FileProcessor.php
+++ b/Classes/Processor/FileProcessor.php
@@ -5,7 +5,7 @@
 namespace PrototypeIntegration\PrototypeIntegration\Processor;

 use PrototypeIntegration\PrototypeIntegration\Formatter\StringFormatter;
-use TYPO3\CMS\Core\Resource\FileReference;
+use TYPO3\CMS\Core\Resource\FileInterface;
 use TYPO3\CMS\Core\Utility\ArrayUtility;
 use TYPO3\CMS\Core\Utility\GeneralUtility;
 use TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer;
@@ -95,37 +95,52 @@
      */
     public function renderFileCollection(string $table, string $fieldName, array $row, array $configuration = []): array
     {
-        $this->configuration = $configuration;
-        $this->setMetaDataConfiguration();
-
+        $this->initialize($configuration);
         $fileCollector = GeneralUtility::makeInstance(FileCollector::class);
         $fileCollector->addFilesFromRelation($table, $fieldName, $row);
         $files = $fileCollector->getFiles();

-        $processedFiles = [];
-        foreach ($files as $file) {
-            $processedFiles[] = $this->getDownloadItem($file);
-        }
+        return $this->processFileCollection($files);
+    }

-        return $processedFiles;
+    /**
+     * @param string $table The referencing table
+     * @param string $fieldName The field name containing the reference
+     * @param array $row The referencing row (must be from $table and include $fieldName)
+     * @param array $configuration
+     * @return array
+     */
+    public function renderFilesFromCollection(array $collection, array $configuration = []): array
+    {
+        $this->initialize($configuration);
+        $fileCollector = GeneralUtility::makeInstance(FileCollector::class);
+        $fileCollector->addFilesFromFileCollections($collection);
+        $files = $fileCollector->getFiles();
+
+        return $this->processFileCollection($files);
+    }
+
+    protected function initialize(array $configuration)
+    {
+        $this->configuration = $configuration;
+        $this->setMetaDataConfiguration();
     }

     /**
      * Retrieve the download item from the db.
      *
-     * @param FileReference $item
+     * @param FileInterface $item
      * @return array
      */
-    protected function getDownloadItem(FileReference $item): array
+    protected function getDownloadItem(FileInterface $item): array
     {
         $fileFormatConfiguration = $this->configuration['formatSize'] ?: [];
-        $description = $this->getMetaDataDescription($item);

         $downloadItem = [
             'link' => [
                 'metaData' => [
-                    'description' => $description,
-                    'name' => $item->getTitle(),
+                    'description' => $this->getMetaDataDescription($item),
+                    'name' => $this->getMetaDataTitle($item),
                     'extension' => $item->getExtension(),
                     'size' => $this->fileSizeProcessor->formatFileSize($item->getSize(), $fileFormatConfiguration)
                 ]
@@ -136,13 +151,7 @@
         $linkConfig = $this->typoLinkStringProcessor->processTypoLinkString($linkString) ?: [];
         ArrayUtility::mergeRecursiveWithOverrule($downloadItem['link'], $linkConfig);

-        $downloadImage = $this->previewImageProcessor->getPreviewImage($item, $this->configuration);
-        if (isset($downloadImage)) {
-            $downloadItem['image'] = $this->pictureProcessor->renderPicture(
-                $downloadImage,
-                $this->configuration['imageConfig']
-            );
-        }
+        $downloadItem = $this->getPreviewImage($item, $downloadItem);

         return $downloadItem;
     }
@@ -152,14 +161,14 @@
      * description-field. It's also possible to use an fallback field, if the defined field is not available
      * or empty.
      *
-     * @param \TYPO3\CMS\Core\Resource\FileReference $item
+     * @param FileInterface $item
      * @return string|null
      */
-    protected function getMetaDataDescription(FileReference $item): ?string
+    protected function getMetaDataDescription(FileInterface $item): ?string
     {
         $description = null;

-        if (! empty($this->metaDataConfiguration['downloadDescriptionField'])
+        if (!empty($this->metaDataConfiguration['downloadDescriptionField'])
             && $item->hasProperty($this->metaDataConfiguration['downloadDescriptionField'])
         ) {
             $description = $item->getProperty($this->metaDataConfiguration['downloadDescriptionField']);
@@ -167,7 +176,7 @@

         // fallback
         if ((empty($description) || is_null($description))
-            && ! empty($this->metaDataConfiguration['downloadDescriptionFallbackField'])
+            && !empty($this->metaDataConfiguration['downloadDescriptionFallbackField'])
             && $item->hasProperty($this->metaDataConfiguration['downloadDescriptionFallbackField'])
         ) {
             $description = $item->getProperty($this->metaDataConfiguration['downloadDescriptionFallbackField']);
@@ -178,6 +187,16 @@
         return $description;
     }

+    protected function getMetaDataTitle(FileInterface $item): string
+    {
+        $title = $item->hasProperty('title') ? $item->getProperty('title') : null;
+        if (empty($title)) {
+            $title = $item->getNameWithoutExtension();
+        }
+
+        return $title;
+    }
+
     protected function setMetaDataConfiguration()
     {
         if (isset($this->configuration['metaDataDescription'])) {
@@ -194,4 +213,31 @@
             }
         }
     }
+
+    protected function processFileCollection(array $files): array
+    {
+        $processedFiles = [];
+        foreach ($files as $file) {
+            $processedFiles[] = $this->getDownloadItem($file);
+        }
+
+        return $processedFiles;
+    }
+
+    protected function getPreviewImage(FileInterface $item, array $downloadItemData): array
+    {
+        if (empty($this->configuration['imageConfig'])) {
+            return $downloadItemData;
+        }
+
+        $downloadImage = $this->previewImageProcessor->getPreviewImage($item, $this->configuration);
+        if (isset($downloadImage)) {
+            $downloadItemData['image'] = $this->pictureProcessor->renderPicture(
+                $downloadImage,
+                $this->configuration['imageConfig']
+            );
+        }
+
+        return $downloadItemData;
+    }
 }
