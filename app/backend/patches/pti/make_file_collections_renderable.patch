From 2873d76c0fad70b8721cd1dc443bba90a98c6074 Mon Sep 17 00:00:00 2001
From: Christian Wolfram <c.wolfram@chriwo.de>
Date: Mon, 20 Jan 2025 10:47:29 +0100
Subject: [PATCH 1/5] [FEATURE] Render files from given file collection

---
 Classes/Processor/FileProcessor.php | 29 +++++++++++++++++++++++++++--
 1 file changed, 27 insertions(+), 2 deletions(-)

diff --git a/Classes/Processor/FileProcessor.php b/Classes/Processor/FileProcessor.php
index fcc1294..159e55c 100644
--- a/Classes/Processor/FileProcessor.php
+++ b/Classes/Processor/FileProcessor.php
@@ -95,13 +95,38 @@ public function __construct(
      */
     public function renderFileCollection(string $table, string $fieldName, array $row, array $configuration = []): array
     {
-        $this->configuration = $configuration;
-        $this->setMetaDataConfiguration();
+        $this->initialize($configuration);

         $fileCollector = GeneralUtility::makeInstance(FileCollector::class);
         $fileCollector->addFilesFromRelation($table, $fieldName, $row);
         $files = $fileCollector->getFiles();

+        return $this->processFileCollection($files);
+    }
+
+    /**
+     * @param array $collection The referencing uid of file collections
+     * @param array $configuration
+     * @return array
+     */
+    public function renderFilesFromCollection(array $collection, array $configuration = []): array
+    {
+        $this->initialize($configuration);
+        $fileCollector = GeneralUtility::makeInstance(FileCollector::class);
+        $fileCollector->addFilesFromFileCollections($collection);
+        $files = $fileCollector->getFiles();
+
+        return $this->processFileCollection($files);
+    }
+
+    protected function initialize(array $configuration): void
+    {
+        $this->configuration = $configuration;
+        $this->setMetaDataConfiguration();
+    }
+
+    protected function processFileCollection(array $files): array
+    {
         $processedFiles = [];
         foreach ($files as $file) {
             $processedFiles[] = $this->getDownloadItem($file);

From c132fc5b3e829750088a3291c9e29a49b892eada Mon Sep 17 00:00:00 2001
From: Christian Wolfram <c.wolfram@chriwo.de>
Date: Mon, 20 Jan 2025 13:07:50 +0100
Subject: [PATCH 2/5] [TASK] Remove doc block parts which has no additional
 information

---
 Classes/Processor/FileProcessor.php | 2 --
 1 file changed, 2 deletions(-)

diff --git a/Classes/Processor/FileProcessor.php b/Classes/Processor/FileProcessor.php
index 159e55c..38a05b3 100644
--- a/Classes/Processor/FileProcessor.php
+++ b/Classes/Processor/FileProcessor.php
@@ -106,8 +106,6 @@ public function renderFileCollection(string $table, string $fieldName, array $ro

     /**
      * @param array $collection The referencing uid of file collections
-     * @param array $configuration
-     * @return array
      */
     public function renderFilesFromCollection(array $collection, array $configuration = []): array
     {

From e8d96494ae789f8b8f28af21ac552af210db7684 Mon Sep 17 00:00:00 2001
From: Christian Wolfram <c.wolfram@chriwo.de>
Date: Mon, 20 Jan 2025 13:13:28 +0100
Subject: [PATCH 3/5] [TASK] Meaningful description for the parameter
 "$collection"

---
 Classes/Processor/FileProcessor.php | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/Classes/Processor/FileProcessor.php b/Classes/Processor/FileProcessor.php
index 38a05b3..be3a00a 100644
--- a/Classes/Processor/FileProcessor.php
+++ b/Classes/Processor/FileProcessor.php
@@ -105,7 +105,7 @@ public function renderFileCollection(string $table, string $fieldName, array $ro
     }

     /**
-     * @param array $collection The referencing uid of file collections
+     * @param array $collection The referencing with multiple uid of file collections
      */
     public function renderFilesFromCollection(array $collection, array $configuration = []): array
     {

From 363a6f8eeff49b43b63a0e8a0f371a3deed5d188 Mon Sep 17 00:00:00 2001
From: Christian Wolfram <c.wolfram@chriwo.de>
Date: Mon, 20 Jan 2025 13:43:00 +0100
Subject: [PATCH 4/5] [TASK] Change parameter type to FileInterface instead of
 FileReference

---
 Classes/Processor/FileProcessor.php | 22 ++++++++++++++++------
 1 file changed, 16 insertions(+), 6 deletions(-)

diff --git a/Classes/Processor/FileProcessor.php b/Classes/Processor/FileProcessor.php
index be3a00a..1781009 100644
--- a/Classes/Processor/FileProcessor.php
+++ b/Classes/Processor/FileProcessor.php
@@ -5,7 +5,7 @@
 namespace PrototypeIntegration\PrototypeIntegration\Processor;

 use PrototypeIntegration\PrototypeIntegration\Formatter\StringFormatter;
-use TYPO3\CMS\Core\Resource\FileReference;
+use TYPO3\CMS\Core\Resource\FileInterface;
 use TYPO3\CMS\Core\Utility\ArrayUtility;
 use TYPO3\CMS\Core\Utility\GeneralUtility;
 use TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer;
@@ -136,10 +136,10 @@ protected function processFileCollection(array $files): array
     /**
      * Retrieve the download item from the db.
      *
-     * @param FileReference $item
+     * @param FileInterface $item
      * @return array
      */
-    protected function getDownloadItem(FileReference $item): array
+    protected function getDownloadItem(FileInterface $item): array
     {
         $fileFormatConfiguration = $this->configuration['formatSize'] ?? [];
         $description = $this->getMetaDataDescription($item);
@@ -148,7 +148,7 @@ protected function getDownloadItem(FileReference $item): array
             'link' => [
                 'metaData' => [
                     'description' => $description,
-                    'name' => $item->getTitle(),
+                    'name' => $this->getMetaDataTitle($item),
                     'extension' => $item->getExtension(),
                     'size' => $this->fileSizeProcessor->formatFileSize($item->getSize(), $fileFormatConfiguration),
                 ],
@@ -175,10 +175,10 @@ protected function getDownloadItem(FileReference $item): array
      * description-field. It's also possible to use an fallback field, if the defined field is not available
      * or empty.
      *
-     * @param \TYPO3\CMS\Core\Resource\FileReference $item
+     * @param FileInterface $item
      * @return string|null
      */
-    protected function getMetaDataDescription(FileReference $item): ?string
+    protected function getMetaDataDescription(FileInterface $item): ?string
     {
         $description = null;

@@ -201,6 +201,16 @@ protected function getMetaDataDescription(FileReference $item): ?string
         return $description;
     }

+    protected function getMetaDataTitle(FileInterface $item): string
+    {
+        $title = $item->hasProperty('title') ? $item->getProperty('title') : '';
+        if (empty($title)) {
+            $title = $item->getNameWithoutExtension();
+        }
+
+        return $title;
+    }
+
     protected function setMetaDataConfiguration()
     {
         if (isset($this->configuration['metaDataDescription'])) {

From e6c37c53d6f9d8a60d80759c91634f095fdbc56d Mon Sep 17 00:00:00 2001
From: Christian Wolfram <c.wolfram@chriwo.de>
Date: Mon, 20 Jan 2025 13:49:12 +0100
Subject: [PATCH 5/5] [TASK] Make rendering of preview image optional

---
 Classes/Processor/FileProcessor.php | 27 ++++++++++++++++++---------
 1 file changed, 18 insertions(+), 9 deletions(-)

diff --git a/Classes/Processor/FileProcessor.php b/Classes/Processor/FileProcessor.php
index 1781009..743ad83 100644
--- a/Classes/Processor/FileProcessor.php
+++ b/Classes/Processor/FileProcessor.php
@@ -159,15 +159,7 @@ protected function getDownloadItem(FileInterface $item): array
         $linkConfig = $this->typoLinkStringProcessor->processTypoLinkString($linkString) ?: [];
         ArrayUtility::mergeRecursiveWithOverrule($downloadItem['link'], $linkConfig);

-        $downloadImage = $this->previewImageProcessor->getPreviewImage($item, $this->configuration);
-        if (isset($downloadImage)) {
-            $downloadItem['image'] = $this->pictureProcessor->renderPicture(
-                $downloadImage,
-                $this->configuration['imageConfig']
-            );
-        }
-
-        return $downloadItem;
+        return $this->getPreviewImage($item, $downloadItem);
     }

     /**
@@ -211,6 +203,23 @@ protected function getMetaDataTitle(FileInterface $item): string
         return $title;
     }

+    protected function getPreviewImage(FileInterface $item, array $downloadItemData): array
+    {
+        if (empty($this->configuration['imageConfig'])) {
+            return $downloadItemData;
+        }
+
+        $downloadImage = $this->previewImageProcessor->getPreviewImage($item, $this->configuration);
+        if ($downloadImage instanceof FileInterface) {
+            $downloadItemData['image'] = $this->pictureProcessor->renderPicture(
+                $downloadImage,
+                $this->configuration['imageConfig']
+            );
+        }
+
+        return $downloadItemData;
+    }
+
     protected function setMetaDataConfiguration()
     {
         if (isset($this->configuration['metaDataDescription'])) {
